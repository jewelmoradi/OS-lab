using System;
using System.Diagnostics;
using System.Linq;
using System.Management;

namespace neginmoradi_OS_HW1
{
    internal static class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Start...");
            for(;;)
            {
                String programName;

                Console.WriteLine("\nSelect an option:");
                Console.WriteLine("1. Start a process.");
                Console.WriteLine("2. List of processes.");
                Console.WriteLine("3. Kill a process.");
                Console.WriteLine("4. Parent of processes.");
                Console.WriteLine("Enter any other number to exit.");

                int choice = int.Parse(Console.ReadLine());

                switch(choice)
                {
                    case 1 :
                        Console.WriteLine("Enter the name of the program: ");
                        programName = Console.ReadLine();
                        startProcess(programName);
                        break;
                    case 2 :
                        showList();
                        break;
                    case 3 :
                        Console.WriteLine("Enter the name of the program: ");
                        programName = Console.ReadLine();
                        killProcess(programName);
                        break;
                    case 4 :
                        Console.WriteLine("Enter the id of the program: ");
                        int processId = int.Parse(Console.ReadLine());
                        var parentInfo = ProcessExtensions.GetParentInfo(processId);

                        if (parentInfo.Name != null)
                        {
                            Console.WriteLine($"Parent Process Name: {parentInfo.Name}");
                            Console.WriteLine($"Parent Process ID: {parentInfo.Id}");
                        }
                        else
                        {
                            Console.WriteLine("Parent Process not found.");
                        }

                        break;
                    default :
                        Console.WriteLine("End...");
                        Environment.Exit(0);
                        break;
                }
            }
        }

        static void startProcess(String programName)
        {
            try
            {
                Process.Start(programName);
            }
            catch(System.ComponentModel.Win32Exception)
            {
                Console.WriteLine("This process is not found!");
            }
        }

        static void showList()
        {
            Process[] processCollection = Process.GetProcesses();
            foreach (Process process in processCollection)
            {
                Console.WriteLine(process.ProcessName + ", id: " + process.Id);
            }
        }

        static void killProcess(String programName)
        {
            try
            {
                Process[] processCollection = Process.GetProcessesByName(programName);
                foreach (Process process in processCollection)
                {
                    process.Kill();
                }
            }
            catch(System.ComponentModel.Win32Exception)
            {
                Console.WriteLine("This process is not found!");
            }
        }

        public static class ProcessExtensions
        {
            public static (string Name, int Id) GetParentInfo(int processId)
            {
                Process process = Process.GetProcessById(processId);

                try
                {
                    using (var query = new ManagementObjectSearcher(
                        "SELECT * " +
                        "FROM Win32_Process " +
                        "WHERE ProcessId=" + process.Id))
                    {
                        var parentProcess = query
                            .Get()
                            .OfType<ManagementObject>()
                            .Select(p => Process.GetProcessById((int)(uint)p["ParentProcessId"]))
                            .FirstOrDefault();

                        if (parentProcess != null)
                        {
                            return (parentProcess.ProcessName, parentProcess.Id);
                        }
                        else
                        {
                            return (null, -1); //return default values if parent process is not found
                        }
                    }
                }
                catch
                {
                    return (null, -1); //return default values in case of any exceptions
                }
            }
        }
    }
}
